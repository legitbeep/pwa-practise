{"version":3,"sources":["App.js","serviceWorkerRegistration.js","index.js"],"names":["App","React","useState","user","setUser","loading","setLoading","data","setData","searchHandler","fetch","then","res","json","message","catch","err","console","log","alert","useEffect","className","htmlFor","onChange","e","target","value","id","type","style","padding","margin","border","onClick","width","map","d","display","justifyContent","alignItems","maxHeight","src","avatar_url","alt","height","login","fontSize","name","bio","href","html_url","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a86cde89.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [user, setUser] = React.useState(\"\");\n  const [loading, setLoading] = React.useState(false);\n  const [data, setData] = React.useState([]);\n\n  const searchHandler = () => {\n    setLoading(true);\n    if (user != \"\") {\n      fetch(`https://api.github.com/users/${user}`)\n        .then((res) => res.json())\n        .then((res) => {\n          if (res.message != \"Not Found\") setData([{ ...res }]);\n          else setData([]);\n          setLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setData(null);\n          setLoading(false);\n        });\n    } else {\n      fetch(`https://api.github.com/users`)\n        .then((res) => res.json())\n        .then((res) => {\n          if (res.message != \"Not Found\") setData(res);\n          else setData([]);\n          setLoading(false);\n        })\n        .catch((err) => {\n          alert(\"ERROR OCCURRED\", err);\n          console.log(err);\n          setLoading(false);\n        });\n    }\n  };\n  React.useEffect(() => {\n    searchHandler();\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <label htmlFor=\"search-input\">Search</label>\n        <input\n          onChange={(e) => setUser(e.target.value)}\n          value={user}\n          id=\"search-input\"\n          type=\"search\"\n          style={{\n            padding: \"8px 4px\",\n            margin: \"8px 0px\",\n            border: \"none !important\",\n          }}\n        />\n        <button onClick={searchHandler}>Search</button>\n        <main style={{ width: \"100%\" }}>\n          {loading && <p>Searching ...</p>}\n          {data &&\n            data.map((d) => (\n              <div\n                key={d.login}\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  justifyContent: \"space-around\",\n                  alignItems: \"center\",\n                  maxHeight: \"300px\",\n                  margin: \"40px 0px\",\n                }}\n              >\n                <img\n                  src={d?.avatar_url}\n                  alt=\"img\"\n                  style={{\n                    padding: \"10px\",\n                    height: \"300px\",\n                  }}\n                />\n                <div>\n                  <h2>{d?.login}</h2>\n                  <p style={{ fontSize: \"18px\" }}>{d?.name}</p>\n                  <p style={{ fontSize: \"18px\" }}>{d?.bio}</p>\n                  <a href={d?.html_url} target=\"_blank\">\n                    {\" \"}\n                    <button>Visit</button>{\" \"}\n                  </a>\n                </div>\n              </div>\n            ))}\n          {!data || (data.length == 0 && <p>Not Found</p>)}\n        </main>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}